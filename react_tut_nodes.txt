The render method returns a description of what you want to render, and then React takes that description and renders it to the screen.  In particular, render returns a React element, which is a lightweight description of what to render.

Each component is encapsulated so it can operate independently, which allows you to build complex UIs out of simple components.

React components can have state by setting this.state in the constructor, which should be considered private to the component.
Whenever this.setState is called, an update to the component is scheduled, causing React to merge in the passed state update and rerender the component along with its descendants.

When you want to aggregate data from multiple children or to have two child components communicate with each other, move the state upwards so that it lives in the parent component. The parent can then pass the state back down to the children via props, so that the child components are always in sync with each other and with the parent.

It is, a common convention in React apps to use on* names for the handler prop names and handle* for their implementations.


Why mutability is important:
 - Easier Undo/Redo and Time Travel ( can go back and forward and display state at different times)
 - Tracking changes - Determining how an immutable object has changed is considerably easier. If the object being referenced is different from before, then the object has changed. That's it.
 - Since immutable data can more easily determine if changes have been made it also helps to determine when a component requires being re-rendered.


Functional Components
React supports a simpler syntax called functional components for component types like Square that only consist of a render method. Rather than define a class extending React.Component, simply write a function that takes props and returns what should be rendered.
Many components in your apps will be able to be written as functional components: these components tend to be easier to write and React will optimize them more in the future


Keys:
When you render a list of items, React always stores some info about each item in the list. If you render a component that has state, that state needs to be stored – and regardless of how you implement your components,
React asks you to specify a key property on each element in a list, a string to differentiate each component from its siblings.
React uses the key automatically while deciding which children to update; there is no way for a component to inquire about its own key.

Tic-tac-toe architecture
For the tic-tac-toe came, To check if someone has won, we'll need to have the value of all 9 squares in one place, rather than split up across the Square components.
Store this state in the Board component instead of in each Square – and the Board component can tell each Square what to display, like how we made each square display its index earlier.

Square no longer keeps its own state; it receives its value from its parent Board and informs its parent when it's clicked. We call components like this controlled components.
